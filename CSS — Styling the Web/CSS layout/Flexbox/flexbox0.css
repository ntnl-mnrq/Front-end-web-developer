html {
    font-family: sans-serif;
}

body {
    margin: 0;
}

header {
    background: purple;
    height: 100px;
}

h1 {
    text-align: center;
    color: white;
    line-height: 100px;
    margin: 0;
}

article {
    padding: 10px;
    margin: 10px;
    background: aqua;
}

/* Flexbox is a one-dimensional layout method for laying out items in rows or columns. Items flex to fill additional space and shrink to fit into smaller spaces. */
/* Why Flexbox?

For a long time, the only reliable cross browser-compatible tools available for creating CSS layouts were things like floats and positioning. These are fine, and they work, but in some ways they are also rather limiting and frustrating.

The following simple layout requirements are either difficult or impossible to achieve with such tools, in any kind of convenient, flexible way:

    Vertically centering a block of content inside its parent.
    Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.
    Making all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.
 */

/* Add your flexbox CSS below here */

/* Specifying what elements to lay out as flexible boxes:
This causes the <section> element to become a flex container, and its children to become flex items.
We have our multiple column layout with equal-sized columns, and the columns are all the same height. This is because the default values given to flex items (the children of the flex container) are set up to solve common problems such as this.
The element we've given a display value of flex to is acting like a block-level element in terms of how it interacts with the rest of the page, but its children are being laid out as flex items. 
Note also that you can use a display value of inline-flex if you wish to lay out an element's children as flex items, but have that element behave like an inline element.*/

section {
    display: flex;
}

/* The flex model

When elements are laid out as flex items, they are laid out along two axes:

    -The main axis is the axis running in the direction the flex items are being laid out in (e.g. as rows across the page, or columns down the page.) The start and end of this axis are called the main start and main end.
    -The cross axis is the axis running perpendicular to the direction the flex items are being laid out in. The start and end of this axis are called the cross start and cross end.
    -The parent element that has display: flex set on it (the <section> in our example) is called the flex container.
    -The items being laid out as flexible boxes inside the flex container are called flex items (the <article> elements in our example).
 */


 /* Columns or rows?

Flexbox provides a property called flex-direction that specifies what direction the main axis runs in (what direction the flexbox children are laid out in). 
By default this is set to row, which causes them to be laid out in a row in the direction your browser's default language works in (left to right, in the case of an English browser). */

/* section {
    flex-direction: column;
    flex-direction: column-reverse;
    flex-direction: row-reverse;
} */