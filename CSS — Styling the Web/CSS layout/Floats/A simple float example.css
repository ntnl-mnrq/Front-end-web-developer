body {
    width: 90%;
    max-width: 900px;
    margin: 0 auto;
    font: .9em/1.2 Arial, Helvetica, sans-serif;
}

.box {
    float: left;
    /* margin-right: 15px; */
    margin: 15px;
    width: 150px;
    height: 100px;
    border-radius: 5px;
    background-color: rgb(207,232,220);
    padding: 1em;
}
.b2 {
    float: right;
    height: 150px;
}

.special {
    background-color: rgb(79,185,227);
    padding: 10px;
    color: #fff;
    display: flow-root;
}

/* So let's think about how the float works — the element with the float set on it (the <div> element in this case) is taken out of the normal layout flow of the document and stuck to the left-hand side of its parent container (<body>, in this case). Any content that comes below the floated element in the normal layout flow will now wrap around it, filling up the space to the right-hand side of it as far up as the top of the floated element. There, it will stop.

Floating the content to the right has exactly the same effect, but in reverse — the floated element will stick to the right, and the content will wrap around it to the left. Try changing the float value to right and replace margin-right with margin-left in the last ruleset to see what the result is.

While we can add a margin to the float to push the text away, we can't add a margin to the text to move it away from the float. This is because a floated element is taken out of normal flow, and the boxes of the following items actually run behind the float.  

The line boxes of our following element have been shortened so the text runs around the float, but due to the float being removed from normal flow the box around the paragraph still remains full width.*/



/* Clearing floats

We have seen that the float is removed from normal flow and that other elements will display beside it, therefore if we want to stop the following element from moving up we need to clear it; this is achieved with the clear property. */
/* 

You should see that the following paragraph clears the floated element and no longer comes up alongside it. The clear property accepts the following values:

    left: Clear items floated to the left.
    right: Clear items floated to the right.
    both: Clear any floated items, left or right.
 */
.cleared {
    clear: left;
}

/* Clearing boxes wrapped around a float 

You now know how to clear something following a floated element, but let's see what happens if you have a tall float and a short paragraph, with a box wrapped around both elements.

You will see that, just like in the example where we put a background color on the paragraph, the background color runs behind the float.*/

.wrapper {
    background-color: rgba(227, 79, 170, 0.589);
    padding: 10px;
    color: #fff;
}

/* Once again, this is because the float has been taken out of normal flow. Clearing the following element doesn't help with this box clearing problem, where you want the bottom of the box to wrap the floated item and wrapping content even if the content is shorter. There are three potential ways to deal with this, two of which work in all browsers — yet are slightly hacky — and a third new way that deals with this situation properly. */

/* The clearfix hack 

The way that this situation has traditionally been dealt with is to use something known as a "clearfix hack". This involves inserting some generated content after the box which contains the float and wrapping content, and setting that to clear both.
This is essentially the same as if you had added an HTML element such as a <div> below the items and set it to clear: both.*/

/* .wrapper::after {
    content: "";
    clear: both;
    display: block;
} */

/* Using overflow

An alternative method is to set the overflow property of the wrapper to a value other than visible. 
This example works by creating what is known as a block formatting context (BFC). This is like a mini layout inside your page, inside which everything is contained, therefore our floated element is contained inside the BFC and the background runs behind both items. This will usually work, however, in certain cases you might find unwanted scrollbars or clipped shadows due to unintended consequences of using overflow.*/
/* .wrapper {
    overflow: auto;
} */

/* display: flow-root 

The modern way of solving this problem is to use the value flow-root of the display property. This exists only to create a BFC without using hacks — there will be no unintended consequences when you use it.
Assuming you have a supporting browser, the box will clear.*/
.wrapper {
    display: flow-root;
}