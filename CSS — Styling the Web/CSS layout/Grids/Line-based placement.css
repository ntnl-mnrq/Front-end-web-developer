body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
    font: .9em/1.2 Arial, Helvetica, sans-serif;
}

.container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    grid-gap: 20px;
}

header,
footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
}

aside {
    border-right: 1px solid #999;
}


/* Line-based placement

We now move on from creating a grid, to placing things on the grid. Our grid always has lines, which lines start at 1 and relate to the Writing Mode of the document. Therefore in English, column line 1 is on the left hand side of the grid and row line 1 at the top. In Arabic column line 1 would be on the right hand side, as Arabic is written right to left.

We can place things according to these lines by specifying the start and end line. We do this using the following properties:

    grid-column-start
    grid-column-end
    grid-row-start
    grid-row-end

These properties can all have a line number as the value. You can also use the shorthand properties:

    grid-column
    grid-row

These let you specify the start and end lines at once, separated by a / â€” a forward slash character. */


/* You can see that auto-placement is placing items one into each cell of the grid that we have created.

We will instead place all of the elements for our site on the grid, using the grid lines. */

/* Note: you can also use the value -1 to target the end column or row line, and count inwards from the end using negative values. Note that lines count always from the edges of the explicit grid, not the implicit grid. */

header {
    grid-column: 1 / 3;
    grid-row: 1;
}

article {
    grid-column: 2;
    grid-row: 2;
}

aside {
    grid-column: 1;
    grid-row: 2;
}

footer {
    grid-column: 1 / 3;
    grid-row: 3;
}