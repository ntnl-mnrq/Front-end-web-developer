/* Positioning techniques

Positioning allows you to move an element from where it would be placed when in normal flow to another location. Positioning isn’t a method for creating your main page layouts, it is more about managing and fine-tuning the position of specific items on the page. */

body {
    width: 500px;
    margin: 0 auto;
  }
  
  .p-box {
      background-color: rgb(207,232,220);
      border: 2px solid rgb(79,185,227);
      padding: 10px;
      margin: 10px;
      border-radius: 5px;
  }

  /* Relative positioning
  Relative positioning allows you to offset an item from the position in normal flow it would have by default. This means you could achieve a task such as moving an icon down a bit so it lines up with a text label. To do this, we could add the following rule to add relative positioning: 
  Here we give our middle paragraph a position value of relative — this doesn't do anything on its own, so we also add top and left properties. These serve to move the affected element down and to the right — this might seem like the opposite of what you were expecting, but you need to think of it as the element being pushed on its left and top sides, which result in it moving right and down.
  */

  .positioned { 
    background: rgba(255,84,104,.3); 
    border: 2px solid rgb(255,84,104); 
    padding: 10px; 
    margin: 10px; 
    border-radius: 5px; 
}
  
  .rel {
    position: relative;
    top: 30px;
    left: 30px;
  }


  /* Absolute positioning

Absolute positioning is used to completely remove an element from normal flow, and place it using offsets from the edges of a containing block.
Going back to our original non-positioned example, we could add the following CSS rule to implement absolute positioning:
Here we give our middle paragraph a position value of absolute, and the same top and left properties as before. Adding this code, however, will give the following result:
/* The positioned element has now been completely separated from the rest of the page layout and sits over the top of it. The other two paragraphs now sit together as if their positioned sibling doesn't exist. The top and left properties have a different effect on absolutely positioned elements than they do on relatively positioned elements. In this case the offsets have been calculated from the top and left of the page. It is possible to change the parent element that becomes this container and we will take a look at that in the lesson on positioning. */

  .abs {
    position: absolute;
    top: 30px;
    left: 30px;
}

/* Fixed positioning

Fixed positioning removes our element from document flow in the same way as absolute positioning. However, instead of the offsets being applied from the container, they are applied from the viewport. As the item remains fixed in relation to the viewport we can create effects such as a menu which remains fixed as the page scrolls beneath it. 

For this example our HTML is three paragraphs of text, in order that we can cause the page to scroll, and a box to which we will give position: fixed.*/
.fixed {
    position: fixed;
    top: 30px;
    left: 30px;
    padding: 10px; 
    margin: 10px; 
}

/* Sticky positioning

Sticky positioning is the final positioning method that we have at our disposal. It mixes the default static positioning with fixed positioning. When an item has position: sticky it will scroll in normal flow until it hits offsets from the viewport that we have defined. At that point it becomes "stuck" as if it had position: fixed applied. */
.sticky {
    position: sticky;
    top: 30px;
    left: 30px;
}