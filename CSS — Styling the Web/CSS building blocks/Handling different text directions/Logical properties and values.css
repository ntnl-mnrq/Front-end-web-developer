* {
  box-sizing: border-box;
  font-family: Arial, Helvetica, sans-serif;
}

body { 
    background-color: #fff;
    color: #333;
    font: 1.2em / 1.5 Helvetica Neue, Helvetica, Arial, sans-serif;
    padding: 0;
    margin: 0;
}

.wrapper {
  display: flex;
}

.box {
  border: 1px solid #ccc;
  padding: 0.5em;
  margin: 10px;
}

.width {
  width: 150px;
}

.horizontal {
  writing-mode: horizontal-tb;
}
/* when the box is in the vertical writing mode, it still has a width, and this is causing the text to overflow */
.vertical {
  writing-mode: vertical-rl;
}

/* What we really want in this scenario, is to essentially swap height and width along with the writing mode. When we're 
in a vertical writing mode we want the box to expand in the block dimension just like it does in the horizontal mode.

To make this easier, CSS has recently developed a set of mapped properties. These essentially replace physical properties 
— things like width and height — with logical, or flow relative versions.

*The property mapped to width when in a horizontal writing mode is called inline-size — it refers to the size in the 
 inline dimension. 
 (Horizontal -> inline-size -> width) *

*The property for height is named block-size and is the size in the block dimension. You can see how this works in the 
 example below where we have replaced width with inline-size.  
 (Vertical -> block-size -> height) *ver diagramas
*/
.inline-size {
    inline-size: 150px;
  }

.block-size {
    block-size: 150px;
  }